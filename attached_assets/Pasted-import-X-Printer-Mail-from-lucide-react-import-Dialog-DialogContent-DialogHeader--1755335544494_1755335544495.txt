import { X, Printer, Mail } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import type { Receipt } from "@shared/schema";
import logoPath from "@assets/EDPOS_1753091767028.png";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { EInvoiceModal } from "./einvoice-modal";
import { PaymentMethodModal } from "./payment-method-modal";
import { useState, useEffect } from "react";
import { useTranslation } from "@/lib/i18n";

interface ReceiptModalProps {
  isOpen: boolean;
  onClose: () => void;
  receipt: Receipt | null;
  onConfirm?: () => void;
  isPreview?: boolean;
  cartItems?: Array<{
    id: number;
    name: string;
    price: number;
    quantity: number;
    sku?: string;
    taxRate?: number;
  }>;
}

export function ReceiptModal({
  isOpen,
  onClose,
  receipt,
  onConfirm,
  isPreview = false,
  cartItems = [],
}: ReceiptModalProps) {
  const [showEInvoiceModal, setShowEInvoiceModal] = useState(false);
  const [showPaymentMethodModal, setShowPaymentMethodModal] = useState(false);
  const { t } = useTranslation();

  console.log("Receipt Modal:", { isOpen, hasReceipt: !!receipt, isPreview });

  // Query store settings to get dynamic address
  const { data: storeSettings } = useQuery({
    queryKey: ["https://bad07204-3e0d-445f-a72e-497c63c9083a-00-3i4fcyhnilzoc.pike.replit.dev/api/store-settings"],
    queryFn: async () => {
      const response = await apiRequest("GET", "https://bad07204-3e0d-445f-a72e-497c63c9083a-00-3i4fcyhnilzoc.pike.replit.dev/api/store-settings");
      return response.json();
    },
  });

  if (!receipt) return null;

  const handlePrint = () => {
    const printContent = document.getElementById("receipt-content");
    if (printContent) {
      // Calculate content height dynamically
      const contentHeight = printContent.scrollHeight;
      const windowWidth = 400;
      // Add some padding for print margins and controls
      const windowHeight = Math.min(Math.max(contentHeight + 120, 300), 800);

      console.log("Receipt content height:", contentHeight, "Window height:", windowHeight);

      if (printContent) {
        const printWindow = window.open("", "_blank", `width=${windowWidth},height=${windowHeight},scrollbars=yes,resizable=yes`);
        if (printWindow) {
          printWindow.document.write(`
            <!DOCTYPE html>
            <html>
              <head>
                <title>Receipt</title>
                <style>
                  body { 
                    font-family: monospace; 
                    margin: 0; 
                    padding: 10px; 
                    font-size: 12px; 
                    line-height: 1.4;
                    background: white;
                  }
                  .receipt-container { 
                    max-width: 300px; 
                    margin: 0 auto; 
                    background: white; 
                  }
                  .text-center { text-align: center; }
                  .text-right { text-align: right; }
                  .font-bold { font-weight: bold; }
                  .border-t { border-top: 1px dashed #000; margin: 8px 0; }
                  .border-b { border-bottom: 1px dashed #000; margin: 8px 0; }
                  .flex { display: flex; }
                  .justify-between { justify-content: space-between; }
                  .space-y-1 > * + * { margin-top: 4px; }
                  .mb-2 { margin-bottom: 8px; }
                  .mb-4 { margin-bottom: 16px; }
                  .text-sm { font-size: 11px; }
                  .text-xs { font-size: 10px; }
                  @media print {
                    body { margin: 0; }
                    .receipt-container { box-shadow: none; }
                  }
                </style>
              </head>
              <body>
                ${printContent.innerHTML}
              </body>
            </html>
          `);
          printWindow.document.close();

        // Wait for content to load then adjust window size
        printWindow.onload = () => {
          const actualContentHeight = printWindow.document.body.scrollHeight;
          const newHeight = Math.min(Math.max(actualContentHeight + 100, 300), 800);
          console.log("Actual content height:", actualContentHeight, "Resizing to:", newHeight);
          printWindow.resizeTo(windowWidth, newHeight);
        };

        // Trigger print dialog
        printWindow.print();

        // Auto close modals after printing
        printWindow.onafterprint = () => {
          console.log("üñ®Ô∏è Print completed, auto-closing print window and receipt modal");
          printWindow.close();

          // Auto close receipt modal after a short delay to ensure print dialog closes first
          setTimeout(() => {
            console.log("üîÑ Auto-closing receipt modal after print completion");
            if (onConfirm) {
              // If there's a confirmation callback, call it to complete the payment flow
              onConfirm();
            }
            // Close the receipt modal
            onClose();
          }, 500);
        };

        // Handle manual close of print window
        const checkClosed = setInterval(() => {
          if (printWindow.closed) {
            console.log("üñ®Ô∏è Print window closed manually, auto-closing receipt modal");
            clearInterval(checkClosed);

            // Auto close receipt modal when print window is closed manually
            setTimeout(() => {
              console.log("üîÑ Auto-closing receipt modal after manual print window close");
              if (onConfirm) {
                // If there's a confirmation callback, call it to complete the payment flow
                onConfirm();
              }
              // Close the receipt modal
              onClose();
            }, 300);
          }
        }, 500);

        // Clear interval after 15 seconds to prevent memory leaks
        setTimeout(() => {
          if (!printWindow.closed) {
            console.log("üñ®Ô∏è Print window still open after 15s, clearing interval");
          }
          clearInterval(checkClosed);
        }, 15000);
      }
    }
  };

  const handleEmail = () => {
    // Mock email functionality
    alert("Email functionality would be implemented here");
  };

  const handleConfirmAndSelectPayment = () => {
    setShowPaymentMethodModal(true);
  };

  const handlePaymentMethodSelect = (method: string) => {
    setShowPaymentMethodModal(false);
    if (onConfirm) {
      onConfirm();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md w-full max-h-screen overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {isPreview ? t('pos.receiptPreview') : t('pos.receipt')}
          </DialogTitle>
        </DialogHeader>

        <div
          id="receipt-content"
          className="receipt-print bg-white"
          style={{ padding: "16px" }}
        >
          <div className="text-center mb-4">
            <p className="text-xs font-semibold mb-1">
              {storeSettings?.storeName || "Easy Digital Point Of Sale Service"}
            </p>
            <p className="text-xs mb-0.5">{t('pos.mainStoreLocation')}</p>
            <p className="text-xs mb-0.5">
              {storeSettings?.address || "123 Commerce St, City, State 12345"}
            </p>
            <p className="text-xs mb-2">
              {t('pos.phone')} {storeSettings?.phone || "(555) 123-4567"}
            </p>
            <div className="flex items-center justify-center">
              <img src={logoPath} alt="EDPOS Logo" className="h-6" />
            </div>
          </div>

          <div className="border-t border-b border-gray-300 py-3 mb-3">
            <div className="flex justify-between text-sm">
              <span>{t('pos.transactionNumber')}</span>
              <span>{receipt.transactionId}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>{t('pos.date')}</span>
              <span>{new Date(receipt.createdAt).toLocaleString()}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>{t('pos.cashier')}</span>
              <span>{receipt.cashierName}</span>
            </div>
            {receipt.paymentMethod === 'einvoice' && (
              <div className="flex justify-between text-sm text-blue-600">
                <span>Tr·∫°ng th√°i E-Invoice:</span>
                <span>{receipt.invoiceNumber ? 'ƒê√£ ph√°t h√†nh' : 'Ch·ªù ph√°t h√†nh'}</span>
              </div>
            )}
          </div>

          <div className="space-y-2 mb-3">
            {receipt.items.map((item) => (
              <div key={item.id}>
                <div className="flex justify-between text-sm">
                  <div className="flex-1">
                    <div>{item.productName}</div>
                    <div className="text-xs text-gray-600">
                      SKU: {`FOOD${String(item.productId || item.id).padStart(5, '0')}`}
                    </div>
                    <div className="text-xs text-gray-600">
                      {item.quantity} x {item.price} ‚Ç´
                    </div>
                  </div>
                  <div>{item.total} ‚Ç´</div>
                </div>
              </div>
            ))}
          </div>

          <div className="border-t border-gray-300 pt-3 space-y-1">
            <div className="flex justify-between text-sm">
              <span>{t('pos.subtotal')}</span>
              <span>{receipt.subtotal} ‚Ç´</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>{t('pos.tax')}</span>
              <span>{receipt.tax} ‚Ç´</span>
            </div>
            <div className="flex justify-between font-bold">
              <span>{t('pos.total')}</span>
              <span>{receipt.total} ‚Ç´</span>
            </div>
            <div className="flex justify-between text-sm mt-2">
              <span>{t('pos.paymentMethod')}</span>
              <span className="capitalize">{receipt.paymentMethod}</span>
            </div>
            {receipt.amountReceived && (
              <div className="flex justify-between text-sm">
                <span>{t('pos.amountReceived')}</span>
                <span>{receipt.amountReceived} ‚Ç´</span>
              </div>
            )}
            {receipt.change && parseFloat(receipt.change) > 0 && (
              <div className="flex justify-between text-sm">
                <span>Change:</span>
                <span>{receipt.change} ‚Ç´</span>
              </div>
            )}
          </div>

          <div className="text-center mt-4 text-xs text-gray-600">
            <p>{t('pos.thankYouBusiness')}</p>
            <p>{t('pos.keepReceiptRecords')}</p>
          </div>
        </div>

        <div className="flex justify-center p-2 border-t">
          {isPreview ? (
            <div className="flex space-x-3 w-full">
              <Button onClick={onClose} variant="outline" className="flex-1">
                {t('pos.cancel')}
              </Button>
              <Button
                onClick={handleConfirmAndSelectPayment}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white transition-colors duration-200"
              >
                {t('pos.confirmAndSelectPayment')}
              </Button>
            </div>
          ) : (
            <div className="flex justify-center space-x-3">
              <Button
                onClick={handlePrint}
                className="bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200"
              >
                <Printer className="mr-2" size={16} />
                {t('pos.printReceipt')}
              </Button>
              {onConfirm && (
                <Button
                  onClick={onConfirm}
                  className="bg-green-600 hover:bg-green-700 text-white transition-colors duration-200"
                >
                  {t('pos.complete')}
                </Button>
              )}
            </div>
          )}
        </div>
      </DialogContent>

      {/* Payment Method Modal */}
      {showPaymentMethodModal && (
        <PaymentMethodModal
          isOpen={showPaymentMethodModal}
          onClose={() => setShowPaymentMethodModal(false)}
          onSelectMethod={handlePaymentMethodSelect}
          total={typeof receipt?.total === 'string' ? parseFloat(receipt.total) : (receipt?.total || 0)}
          cartItems={cartItems}
          onShowEInvoice={() => setShowEInvoiceModal(true)}
        />
      )}

      {/* E-Invoice Modal */}
      {showEInvoiceModal && (
        <EInvoiceModal
          isOpen={showEInvoiceModal}
          onClose={() => setShowEInvoiceModal(false)}
          onConfirm={(eInvoiceData) => {
            console.log('üìß E-Invoice confirmed:', eInvoiceData);
            setShowEInvoiceModal(false);

            // Sau khi e-invoice x·ª≠ l√Ω xong (ph√°t h√†nh ngay ho·∫∑c ph√°t h√†nh sau),
            // hi·ªÉn th·ªã l·∫°i receipt modal ƒë·ªÉ in h√≥a ƒë∆°n
            console.log('üìÑ Showing receipt modal after e-invoice processing');
          }}
          total={typeof receipt?.total === 'string' ? parseFloat(receipt.total) : (receipt?.total || 0)}
          selectedPaymentMethod={receipt?.paymentMethod || 'cash'}
          cartItems={(() => {
            console.log("üîÑ Receipt Modal - Preparing cartItems for EInvoice:");
            console.log("- cartItems prop:", cartItems);
            console.log("- cartItems length:", cartItems?.length || 0);
            console.log("- receipt items:", receipt?.items);

            // Always prefer cartItems prop since it has the most accurate data
            if (cartItems && Array.isArray(cartItems) && cartItems.length > 0) {
              console.log("‚úÖ Using cartItems prop for e-invoice (most accurate data)");
              // Ensure all cartItems have proper structure
              const processedCartItems = cartItems.map(item => ({
                id: item.id,
                name: item.name,
                price: typeof item.price === 'string' ? parseFloat(item.price) : item.price,
                quantity: typeof item.quantity === 'string' ? parseInt(item.quantity) : item.quantity,
                sku: item.sku || `FOOD${String(item.id).padStart(5, '0')}`,
                taxRate: typeof item.taxRate === 'string' ? parseFloat(item.taxRate || "10") : (item.taxRate || 10)
              }));
              console.log("üîß Processed cartItems for e-invoice:", processedCartItems);
              return processedCartItems;
            } else if (receipt?.items && Array.isArray(receipt.items) && receipt.items.length > 0) {
              console.log("‚ö†Ô∏è Fallback to receipt items for e-invoice");
              return receipt.items.map(item => ({
                id: item.productId || item.id,
                name: item.productName,
                price: typeof item.price === 'string' ? parseFloat(item.price) : item.price,
                quantity: typeof item.quantity === 'string' ? parseInt(item.quantity) : item.quantity,
                sku: item.productId?.toString() || `FOOD${String(item.id).padStart(5, '0')}`,
                taxRate: 10
              }));
            } else {
              console.error("‚ùå No valid cart items found for e-invoice");
              return [];
            }
          })()}
        />
      )}
    </Dialog>
  
