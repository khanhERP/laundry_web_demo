import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Plus, Package, AlertTriangle, TrendingUp, Search, Edit, RotateCcw } from "lucide-react";
import { POSHeader } from "@/components/pos/header";
import { RightSidebar } from "@/components/ui/right-sidebar";
import { useTranslation } from "@/lib/i18n";
import { apiRequest } from "@/lib/queryClient";
import type { Product, Category } from "@shared/schema";

const stockUpdateSchema = z.object({
  productId: z.number(),
  quantity: z.number().min(1, "Quantity must be at least 1"),
  type: z.enum(["add", "subtract", "set"]),
  notes: z.string().optional(),
});

type StockUpdateForm = z.infer<typeof stockUpdateSchema>;

export default function InventoryPage() {
  const { t } = useTranslation();

  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [stockFilter, setStockFilter] = useState<string>("all");
  const [showStockDialog, setShowStockDialog] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  
  const queryClient = useQueryClient();

  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({
    queryKey: ["https://bad07204-3e0d-445f-a72e-497c63c9083a-00-3i4fcyhnilzoc.pike.replit.dev/api/products"],
  });

  const { data: categories = [] } = useQuery<Category[]>({
    queryKey: ["https://bad07204-3e0d-445f-a72e-497c63c9083a-00-3i4fcyhnilzoc.pike.replit.dev/api/categories"],
  });

  const stockUpdateForm = useForm<StockUpdateForm>({
    resolver: zodResolver(stockUpdateSchema),
    defaultValues: {
      quantity: 1,
      type: "add",
    },
  });

  const updateStockMutation = useMutation({
    mutationFn: async (data: StockUpdateForm) => {
      return await apiRequest('https://bad07204-3e0d-445f-a72e-497c63c9083a-00-3i4fcyhnilzoc.pike.replit.dev/api/inventory/update-stock', 'POST', data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["https://bad07204-3e0d-445f-a72e-497c63c9083a-00-3i4fcyhnilzoc.pike.replit.dev/api/products"] });
      setShowStockDialog(false);
      stockUpdateForm.reset();
    },
  });

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === "all" || product.categoryId.toString() === selectedCategory;
    const matchesStock = stockFilter === "all" || 
                        (stockFilter === "low" && product.stock <= 10) ||
                        (stockFilter === "out" && product.stock === 0) ||
                        (stockFilter === "in" && product.stock > 10);
    
    return matchesSearch && matchesCategory && matchesStock;
  });

  const lowStockCount = products.filter(p => p.stock <= 10 && p.stock > 0).length;
  const outOfStockCount = products.filter(p => p.stock === 0).length;
  const totalValue = products.reduce((sum, p) => sum + (parseFloat(p.price) * p.stock), 0);

  const handleStockUpdate = (product: Product) => {
    setSelectedProduct(product);
    stockUpdateForm.setValue("productId", product.id);
    setShowStockDialog(true);
  };

  const onStockUpdate = (data: StockUpdateForm) => {
    updateStockMutation.mutate(data);
  };

  const getStockStatus = (stock: number) => {
    if (stock === 0) return { label: t('inventory.outOfStock'), color: "bg-red-500" };
    if (stock <= 10) return { label: t('inventory.lowStock'), color: "bg-yellow-500" };
    return { label: t('inventory.inStock'), color: "bg-green-500" };
  };

  return (
    <div className="min-h-screen bg-green-50 grocery-bg">
      <POSHeader />
      <RightSidebar />
      
      <div className="main-content pt-16 px-6">
        <div className="max-w-7xl mx-auto py-8">
          {/* Page Header */}
          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{t('inventory.title')}</h1>
              <p className="text-gray-600 mt-2">{t('inventory.description')}</p>
            </div>
          </div>

          {/* Statistics Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <Card className="border-green-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-gray-600">{t('inventory.totalProducts')}</CardTitle>
                <Package className="h-4 w-4 text-green-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-gray-900">{products.length}</div>
              </CardContent>
            </Card>

            <Card className="border-green-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-gray-600">{t('inventory.lowStock')}</CardTitle>
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-yellow-600">{lowStockCount}</div>
              </CardContent>
            </Card>

            <Card className="border-green-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-gray-600">{t('inventory.outOfStock')}</CardTitle>
                <AlertTriangle className="h-4 w-4 text-red-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-red-600">{outOfStockCount}</div>
              </CardContent>
            </Card>

            <Card className="border-green-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-gray-600">{t('inventory.totalValue')}</CardTitle>
                <TrendingUp className="h-4 w-4 text-green-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-600">â‚©{totalValue.toLocaleString()}</div>
              </CardContent>
            </Card>
          </div>

          {/* Filters */}
          <Card className="mb-8 border-green-200">
            <CardContent className="pt-6">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder={t('inventory.searchProducts')}
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger className="w-[200px]">
                    <SelectValue placeholder={t('common.category')} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">{t('pos.allCategories')}</SelectItem>
                    {categories.map((category) => (
                      <SelectItem key={category.id} value={category.id.toString()}>
                        {category.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={stockFilter} onValueChange={setStockFilter}>
                  <SelectTrigger className="w-[200px]">
                    <SelectValue placeholder={t('inventory.stockStatus')} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">{t('inventory.allStock')}</SelectItem>
                    <SelectItem value="in">{t('inventory.inStock')}</SelectItem>
                    <SelectItem value="low">{t('inventory.lowStock')}</SelectItem>
                    <SelectItem value="out">{t('inventory.outOfStock')}</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Products Table */}
          <Card className="border-green-200">
            <CardHeader>
              <CardTitle>{t('inventory.stockStatus')}    </CardTitle>
            </CardHeader>
            <CardContent>
              {productsLoading ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto"></div>
                  <p className="mt-4 text-gray-600">{t('inventory.loading')}</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-green-200">
                        <th className="text-left py-3 px-4 font-medium text-gray-700">{t('inventory.productName')}</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-700">SKU</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-700">{t('common.category')}</th>
                        <th className="text-center py-3 px-4 font-medium text-gray-700">{t('inventory.currentStock')}</th>
                        <th className="text-center py-3 px-4 font-medium text-gray-700">{t('common.status')}</th>
                        <th className="text-right py-3 px-4 font-medium text-gray-700">{t('inventory.unitPrice')}</th>
                        <th className="text-right py-3 px-4 font-medium text-gray-700">{t('inventory.stockValue')}</th>
                        <th className="text-center py-3 px-4 font-medium text-gray-700">{t('inventory.management')}</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredProducts.map((product) => {
                        const category = categories.find(c => c.id === product.categoryId);
                        const status = getStockStatus(product.stock);
                        const stockValue = parseFloat(product.price) * product.stock;
                        
                        return (
                          <tr key={product.id} className="border-b border-gray-100 hover:bg-green-50/50">
                            <td className="py-4 px-4">
                              <div className="font-medium text-gray-900">{product.name}</div>
                            </td>
                            <td className="py-4 px-4 text-gray-600">{product.sku}</td>
                            <td className="py-4 px-4">
                              <Badge variant="outline" className="text-green-700 border-green-300">
                                {category?.name || t('inventory.uncategorized')}
                              </Badge>
                            </td>
                            <td className="py-4 px-4 text-center">
                              <span className="text-lg font-semibold">{product.stock}</span>
                            </td>
                            <td className="py-4 px-4 text-center">
                              <Badge className={`${status.color} text-white`}>
                                {status.label}
                              </Badge>
                            </td>
                            <td className="py-4 px-4 text-right text-gray-900">
                              â‚©{parseFloat(product.price).toLocaleString()}
                            </td>
                            <td className="py-4 px-4 text-right font-medium text-gray-900">
                              â‚©{stockValue.toLocaleString()}
                            </td>
                            <td className="py-4 px-4 text-center">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleStockUpdate(product)}
                                className="text-green-600 border-green-300 hover:bg-green-50"
                              >
                                <Edit className="h-4 w-4 mr-1" />
                                {t('inventory.edit')}
                              </Button>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                  
                  {filteredProducts.length === 0 && (
                    <div className="text-center py-12">
                      <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-600">{t('inventory.noProducts')}</p>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Stock Update Dialog */}
      <Dialog open={showStockDialog} onOpenChange={setShowStockDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>{t('inventory.stockUpdate')}</DialogTitle>
          </DialogHeader>
          
          {selectedProduct && (
            <Form {...stockUpdateForm}>
              <form onSubmit={stockUpdateForm.handleSubmit(onStockUpdate)} className="space-y-4">
                <div className="bg-green-50 p-4 rounded-lg">
                  <h3 className="font-medium text-gray-900">{selectedProduct.name}</h3>
                  <p className="text-sm text-gray-600">{t('inventory.currentStockLabel')}: {selectedProduct.stock}{t('common.items')}</p>
                </div>

                <FormField
                  control={stockUpdateForm.control}
                  name="type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t('inventory.stockUpdateType')}</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder={t('inventory.selectUpdateType')} />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="add">{t('inventory.addStock')}</SelectItem>
                          <SelectItem value="subtract">{t('inventory.subtractStock')}</SelectItem>
                          <SelectItem value="set">{t('inventory.setStock')}</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={stockUpdateForm.control}
                  name="quantity"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t('inventory.quantity')}</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          min="1"
                          placeholder={t('inventory.quantityInput')}
                          {...field}
                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={stockUpdateForm.control}
                  name="notes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t('inventory.notesOptional')}</FormLabel>
                      <FormControl>
                        <Input placeholder={t('inventory.changeReason')} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="flex justify-end space-x-2 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowStockDialog(false)}
                  >
                    {t('common.cancel')}
                  </Button>
                  <Button
                    type="submit"
                    disabled={updateStockMutation.isPending}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    {updateStockMutation.isPending ? (
                      <>
                        <RotateCcw className="h-4 w-4 mr-2 animate-spin" />
                        {t('inventory.processing')}
                      </>
                    ) : (
                      t('inventory.stockUpdate')
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}